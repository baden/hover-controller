import serial
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import deque
import re

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
SERIAL_PORT = '/dev/tty.usbmodem22302'          # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –ø–æ—Ä—Ç, –Ω–∞–ø—Ä. /dev/ttyUSB0
BAUD_RATE = 115200
MAX_DATA_POINTS = 200         # –ú–∞–∫—Å. –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É

# üåÄ –ü–æ—Ä—Ç
ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)

# üìä –î–∞–Ω—ñ
data_buffers = {}
axes = {}
lines = {}
line_pattern = re.compile(r'(\w+):([+-]?(\d+(\.\d*)?|\.\d+))')

# üé® –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–≥—É—Ä–∞
fig, axs = plt.subplots(nrows=1, ncols=1)
fig.subplots_adjust(hspace=0.5)

def update(frame):
    global data_buffers, axes, lines, fig, axs

    try:
        line = ser.readline().decode('utf-8').strip()
        matches = line_pattern.findall(line)

        if not matches:
            return

        changed = False

        for var, value, *_ in matches:
            value = float(value)
            if var not in data_buffers:
                # –ù–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞: —Å—Ç–≤–æ—Ä–∏—Ç–∏ subplot
                data_buffers[var] = deque(maxlen=MAX_DATA_POINTS)

                # –ü–µ—Ä–µ–±—É–¥—É–≤–∞—Ç–∏ subplot-–∏
                fig.clf()
                axs = fig.subplots(nrows=len(data_buffers), ncols=1, sharex=True)
                if len(data_buffers) == 1:
                    axs = [axs]

                lines.clear()
                for i, (vname, buf) in enumerate(data_buffers.items()):
                    axes[vname] = axs[i]
                    lines[vname], = axs[i].plot([], [], label=vname)
                    axs[i].set_ylabel(vname)
                    axs[i].legend(loc='upper left')

                changed = True

            data_buffers[var].append(value)

        if changed:
            return  # –¥–æ—á–µ–∫–∞–π–º–æ—Å—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–¥—Ä—É –∑ –Ω–æ–≤–æ—é –≥—Ä–∞—Ñ—ñ–∫–æ—é

        for var, buf in data_buffers.items():
            y_data = list(buf)
            x_data = list(range(len(y_data)))
            lines[var].set_data(x_data, y_data)
            axes[var].relim()
            axes[var].autoscale_view()

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

ani = animation.FuncAnimation(fig, update, interval=100)
plt.tight_layout()
plt.show()
